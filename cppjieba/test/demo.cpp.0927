#include "cppjieba/Jieba.hpp"
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <cmath>
#include <list>
#include <chrono>

const char *const DICT_PATH = "../dict/jieba.dict.utf8";
const char *const HMM_PATH = "../dict/hmm_model.utf8";
const char *const USER_DICT_PATH = "../dict/user.dict.utf8";
const char *const IDF_PATH = "../dict/idf.utf8";
const char *const STOP_WORD_PATH = "../dict/stop_words.utf8";

static int GetUtf8LetterNumber(const char *s)
{
  int i = 0, j = 0;
  while (s[i])
  {
    if ((s[i] & 0xc0) != 0x80)
      j++;
    i++;
  }
  return j;
}

template<typename T>
inline void printVec(const T &in, bool lf = true)
{
  if (in.size() < 0)
    return;
  int cnt = 0;
  std::cout << "[";
  for (auto item : in)
  {
    if (cnt > 0)
      std::cout << ",";

    std::cout << item ;
        ++cnt;
  }
  std::cout << "]";
  if (lf)
    std::cout << std::endl;
}

int main(int argc, char **argv)
{

  if (argc <= 1)
  {
    std::cout << "Please specify a data file to cut!" << std::endl;
    return EXIT_FAILURE;
  }

  cppjieba::Jieba jieba(DICT_PATH,
                        HMM_PATH,
                        USER_DICT_PATH,
                        IDF_PATH,
                        STOP_WORD_PATH);
  std::vector<std::string> words;
  std::vector<std::string> fileData;
  std::vector<std::vector<std::string>> fileDataCut;
  std::vector<cppjieba::Word> jiebawords;
  std::string s;
  std::string result;

  // Read file contents
  std::ifstream fin;
  fin.open(argv[1], std::ios::in);
  std::stringstream buf;
  buf << fin.rdbuf();

  int cnt = 0;
  for (std::string line; std::getline(buf, line);)
  {
    ++cnt;

    // Skip blank
    if (line.size() <= 0)
      continue;

    // Skip shorter or longer
    int charNum = 0;
    charNum = GetUtf8LetterNumber(line.c_str());
    if (charNum <= 2 || charNum >= 20)
      continue;

    // std::cout << cnt << ":" << line << ":" << line.size() << ":" << charNum << std::endl;
    fileData.push_back(line);
    jieba.Cut(line, words, true);
    fileDataCut.push_back(words);
    // std::cout << limonp::Join(words.begin(), words.end(), "/") << std::endl;
  }

  std::list<std::list<std::string>> allSimilarSentence;
  // To find similrity
  for (int i = 0; i < fileDataCut.size(); ++i)
  {
    std::cout << "Deal with No.:" << i << std::endl;

    auto stime = std::chrono::high_resolution_clock::now();

    std::list<std::string> similarSentence;
    std::multiset<std::string> ASet(fileDataCut[i].begin(), fileDataCut[i].end());
    for (int j = i + 1; j < fileDataCut.size(); ++j)
    {

      // printVec(fileDataCut[i]);
      // printVec(fileDataCut[j]);
      std::multiset<std::string> BSet(fileDataCut[j].begin(), fileDataCut[j].end());
      std::set<std::string> ABSet(ASet.begin(), ASet.end());
      

      // union
      ABSet.insert(BSet.begin(), BSet.end());
      // printVec(ABSet);
      

      std::vector<int> AVec(ABSet.size(), 0);
      std::vector<int> BVec(ABSet.size(), 0);
      
      int k = 0;
      int sum_ABdot = 0;
      int sum_AAdot = 0;
      int sum_BBdot = 0;
      for (auto item: ABSet) {
        AVec[k] = ASet.count(item);
        BVec[k] = BSet.count(item);
        sum_ABdot += AVec[k] * BVec[k];
        sum_AAdot += AVec[k] * AVec[k];
        sum_BBdot += BVec[k] * BVec[k];
        ++k;
      }
continue;
      double cosineSimilarity = sum_ABdot / (std::sqrt(sum_AAdot) * std::sqrt(sum_BBdot));
      if (cosineSimilarity >= 0.8)
      {
        similarSentence.push_back(fileData[j]);
      }

      // printVec(AVec);
      // printVec(BVec);
      // std::cout << std::endl;
    }

    if (similarSentence.size() > 0)
    {
      similarSentence.push_front(fileData[i]);
      allSimilarSentence.push_back(std::move(similarSentence));
    }

    auto etime = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> diff = etime - stime;
    std::cout << "elapse:" << std::fixed <<std::setprecision(10) << diff.count() << std::endl;

  }

  for (auto item: allSimilarSentence) {
    std::cout << "(" << item.size() << "," ;
    printVec(item, false);
    std::cout << ")" << std::endl;
  }
  
  std::cout << "cnt:" << cnt << std::endl;
  std::cout << "fileData:" << fileData.size() << std::endl;
  std::cout << "fileDataCut:" << fileDataCut.size() << std::endl;

  return EXIT_SUCCESS;
}
