#include "cppjieba/Jieba.hpp"
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <cmath>
#include <list>
#include <chrono>
#include <unordered_map>
#include <thread>

const int ROOT_MIN_NUM = 2;
const int ROOT_MAX_NUM = 20;
const int TH_NUM = 4;

const char *const DICT_PATH = "../dict/jieba.dict.utf8";
const char *const HMM_PATH = "../dict/hmm_model.utf8";
const char *const USER_DICT_PATH = "../dict/user.dict.utf8";
const char *const IDF_PATH = "../dict/idf.utf8";
const char *const STOP_WORD_PATH = "../dict/stop_words.utf8";

static int GetUtf8LetterNumber(const char *s)
{
  int i = 0, j = 0;
  while (s[i])
  {
    if ((s[i] & 0xc0) != 0x80)
      j++;
    i++;
  }
  return j;
}

template <typename T>
inline void printVec(const T &in, bool lf = true)
{
  if (in.size() < 0)
    return;
  int cnt = 0;
  std::cout << "[";
  for (auto item : in)
  {
    if (cnt > 0)
      std::cout << ",";

    std::cout << item;
    ++cnt;
  }
  std::cout << "]";
  if (lf)
    std::cout << std::endl;
}

template <typename T, typename U>
inline int countDupicate(T &i, U &v)
{
  // if (v.size() <= 0)
  //   return 0;

  int cnt = 1;
  for (auto k = i + 1; k < v.size(); ++k)
  {
    if (v[i] != v[k])
      break;

    ++i;
    cnt += 1;
  }

  return cnt;
}

int main(int argc, char **argv)
{

  if (argc <= 1)
  {
    std::cout << "Please specify a data file to cut!" << std::endl;
    return EXIT_FAILURE;
  }

  cppjieba::Jieba jieba(DICT_PATH,
                        HMM_PATH,
                        USER_DICT_PATH,
                        IDF_PATH,
                        STOP_WORD_PATH);
  std::vector<std::string> words;
  std::vector<uint32_t> wordsNum;
  std::vector<std::string> fileData;
  // std::vector<std::vector<std::string>> fileDataCut;
  std::vector<std::vector<uint32_t>> fileDataCutNum;
  std::vector<cppjieba::Word> jiebawords;
  std::string s;
  std::string result;
  std::unordered_map<std::string, int> rootMap;
  uint32_t rootNo = 0;

  // Read file contents
  std::ifstream fin;
  fin.open(argv[1], std::ios::in);
  std::stringstream buf;
  buf << fin.rdbuf();

  int cnt = 0;

  for (std::string line; std::getline(buf, line);)
  {
    ++cnt;

    // Skip blank
    if (line.size() <= 0)
      continue;

    // Skip shorter or longer
    int charNum = 0;
    charNum = GetUtf8LetterNumber(line.c_str());
    if (charNum <= ROOT_MIN_NUM || charNum >= ROOT_MAX_NUM)
      continue;

    // std::cout << cnt << ":" << line << ":" << line.size() << ":" << charNum << std::endl;
    fileData.push_back(line);
    jieba.Cut(line, words, true);
    wordsNum.clear();
    for (auto &word : words)
    {
      auto iter = rootMap.find(word);
      if (iter != rootMap.end())
        wordsNum.push_back(iter->second);
      else
      {
        rootMap[word] = ++rootNo;
        wordsNum.push_back(rootNo);
      }
    }

    std::sort(wordsNum.begin(), wordsNum.end());
    fileDataCutNum.push_back(wordsNum);
    // std::cout << limonp::Join(words.begin(), words.end(), "/") << std::endl;
  }

  std::cout << "Load data success!" << std::endl;
  std::cout << "Total cnt:" << cnt << std::endl;
  std::cout << "Valid cnt:" << fileData.size() << std::endl;
  std::cout << "Key cnt:" << rootMap.size() << std::endl;
  std::cout << "Key max number:" << rootNo << std::endl;

  int th_step = fileDataCutNum.size() / TH_NUM;
  if (th_step % TH_NUM)
    th_step += 1;

  std::vector<std::list<std::list<std::string>>> ths_similarity(TH_NUM);
  std::vector<std::thread> ths;
  std::vector<int> th_prog(TH_NUM);

  for (auto th_i = 0; th_i < TH_NUM; ++th_i)
  {
    ths.push_back(std::thread([&, th_i] {
      // std::cout << "Start thread " << th_i << std::endl;
      auto &allSimilarSentence = ths_similarity[th_i];
      // std::list<std::list<std::string>> allSimilarSentence;
      // To find similrity
      int th_start = th_i * th_step;
      int th_end = th_start + th_step;
      if (th_end > fileDataCutNum.size())
      {
        th_end = fileDataCutNum.size();
      }

      for (int i = th_start; i < th_end; ++i)
      {
        th_prog[th_i]++;
        // std::cout << "th " << th_i << "No.:" << i << std::endl;

        // auto stime = std::chrono::high_resolution_clock::now();

        std::list<std::string> similarSentence;

        for (int j = i + 1; j < fileDataCutNum.size(); ++j)
        {
          auto &av = fileDataCutNum[i];
          auto &bv = fileDataCutNum[j];

          auto ia = 0;
          auto ib = 0;
          uint64_t AVecDot = 0;
          uint64_t BVecDot = 0;

          // Build A B root vector
          uint64_t sum_ABdot = 0;
          uint64_t sum_AAdot = 0;
          uint64_t sum_BBdot = 0;

          while (ia < av.size() && ib < bv.size())
          {
            if (av[ia] == bv[ib])
            {
              AVecDot = countDupicate(ia, av);
              BVecDot = countDupicate(ib, bv);
              ++ib;
              ++ia;
            }
            else if (av[ia] < bv[ib])
            {
              AVecDot = countDupicate(ia, av);
              BVecDot = 0;
              ++ia;
            }
            else
            {
              AVecDot = 0;
              BVecDot = countDupicate(ib, bv);
              ++ib;
            }

            sum_ABdot += AVecDot * BVecDot;
            sum_AAdot += AVecDot * AVecDot;
            sum_BBdot += BVecDot * BVecDot;
          }

          while (ia < av.size())
          {
            AVecDot = countDupicate(ia, av);
            BVecDot = 0;

            sum_ABdot += AVecDot * BVecDot;
            sum_AAdot += AVecDot * AVecDot;
            sum_BBdot += BVecDot * BVecDot;
            ++ia;
          }

          while (ib < bv.size())
          {
            BVecDot = countDupicate(ib, bv);
            AVecDot = 0;

            sum_ABdot += AVecDot * BVecDot;
            sum_AAdot += AVecDot * AVecDot;
            sum_BBdot += BVecDot * BVecDot;
            ++ib;
          }

          double cosineSimilarity = (double)sum_ABdot / (std::sqrt(sum_AAdot) * std::sqrt(sum_BBdot));
          if (cosineSimilarity >= 0.8)
          {
            similarSentence.push_back(fileData[j]);
          }
        }

        if (similarSentence.size() > 0)
        {
          similarSentence.push_front(fileData[i]);
          allSimilarSentence.push_back(std::move(similarSentence));
        }

        // auto etime = std::chrono::high_resolution_clock::now();
        // std::chrono::duration<double> diff = etime - stime;
        // std::cout << "elapse:" << std::fixed << std::setprecision(9) << diff.count() << "s" << std::endl;
      }

      // for (auto item : allSimilarSentence)
      // {
      //   std::cout << "(" << item.size() << ",";
      //   printVec(item, false);
      //   std::cout << ")" << std::endl;
      // }
    }));

    // ths.push_back(std::move(th));
  }

  int total;
  do
  {
    total = 0;
    for (int i = 0; i < th_prog.size(); ++i)
    {
      std::cout << "th_pro[" << i << "]=" << th_prog[i] << " ";
      total += th_prog[i];
    }
    std::cout << "Progress ..." << total << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(1));
  } while (total < fileDataCutNum.size());

  for (auto i = 0; i < ths.size(); ++i)
  {
    ths[i].join();
    for (auto &item : ths_similarity[i])
    {
      std::cout << "(" << item.size() << ",";
      printVec(item, false);
      std::cout << ")" << std::endl;
    }

    // std::cout << "Join thread " << i << std::endl;
  }

  return EXIT_SUCCESS;
}
